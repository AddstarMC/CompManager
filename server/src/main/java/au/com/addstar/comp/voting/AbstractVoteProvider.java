package au.com.addstar.comp.voting;


import com.plotsquared.core.plot.PlotId;
import org.bukkit.entity.Player;

import java.util.UUID;

public abstract class AbstractVoteProvider<T extends Vote> {
	private final VoteStorage<T> storage;
	
	public AbstractVoteProvider(VoteStorage<T> storage) {
		this.storage = storage;
	}
	
	/**
	 * Gets the vote storage used to record votes generated by this provider
	 * @return The storage
	 */
	public VoteStorage<T> getStorage() {
		return storage;
	}
	
	/**
	 * Handles the vote command. If the voting through the command is not wanted,
	 * throw an IllegalStateException. If the input arguments are not valid, throw an IllegalArgumentException.
	 * You can use this vote command to perform voting in some other way. If the vote creation will be delayed,
	 * return null in this method and manually record the vote with <code>getStorage().recordVote(voter, vote)</code>
	 * @param voter The player running the vote command
	 * @param plot The plot being voted on
	 * @param plotowner The owner of the plot
	 * @param arguments The arguments provided to the vote command
	 * @return The created vote, or null if it will be handled elsewhere
	 * @throws IllegalArgumentException Throws an exception if the provided arguments arent valid for this strategy
	 * @throws IllegalStateException Thrown if the vote command cannot be used
	 */
	public T onVoteCommand(Player voter, PlotId plot, UUID plotowner, String[] arguments) throws IllegalArgumentException {
		throw new IllegalStateException();
	}
	
	/**
	 * Handles tab completion for the vote command
	 * @param arguments The arguments provided to the vote command
	 * @return The options or null
	 */
	public Iterable<String> onVoteTabComplete(String[] arguments) {
		return null;
	}
	
	/**
	 * Gets the argument usage text for the vote command when using this strategy.
	 * This should only concern itself with arguments that this strategy uses
	 * @return The usage text
	 */
	public String getVoteCommandArguments() {
		return "";
	}

	/**
	 * Loads a vote from its value and plot
	 * @param plotId The plot the vote is for
	 * @param plotowner The owner of the plot
	 * @param value The value of the vote
	 * @return The loaded vote
	 * @throws IllegalArgumentException Thrown if the value is not valid for the vote type
	 */
	public abstract T loadVote(PlotId plotId, UUID plotowner, int value) throws IllegalArgumentException;
}
